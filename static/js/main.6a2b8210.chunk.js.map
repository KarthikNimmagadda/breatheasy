{"version":3,"sources":["Breathing.js","Header.js","App.js","reportWebVitals.js","index.js"],"names":["getSpinnerAnimation","breathingType","Breathing","props","_useState","useState","_useState2","Object","slicedToArray","animationState","setAnimationState","_useState3","_useState4","showSpinner","setShowSpinner","spinnerSVG","react_default","a","createElement","viewBox","id","stroke","strokeLinecap","strokeWidth","d","style","animation","concat","animationTime","text","href","url","color","Button","variant","size","className","onClick","display","Header","_ref","onBreathingSelected","breathingData","type","App","selectedBreathing","setSelectedBreathing","selectedBreathingData","find","breathing","src_Breathing_0","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.6a2b8210.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button } from 'react-bootstrap';\nimport './Breathing.css';\n\nconst Breathing = (props) => {\n  const [animationState, setAnimationState] = useState('paused');\n  const [showSpinner, setShowSpinner] = useState(false);\n\n  const spinnerSVG = (\n    <svg viewBox=\"0 0 24 22\">\n      <path\n        id=\"spinner\"\n        stroke=\"#c25\"\n        strokeLinecap=\"round\"\n        strokeWidth=\"13\"\n        d=\"M6.6 6.6q1 3 5 6 4-3 5-6\"\n        style={{\n          animation: `${getSpinnerAnimation(props.breathingType)} ${props.animationTime}s infinite ${animationState === 'paused' ? 'paused' : 'running'}`,\n        }}\n      />\n    </svg>\n  );\n\n  return (\n    <div>\n        <div>\n            <p>{props.text}(<a href={props.url} style={{ color: 'rgb(153, 170, 153)' }}>video reference</a>)</p>\n            <Button variant=\"outline-secondary\" size=\"sm\" className={animationState === 'running' ? 'btn-youtube-pause' : 'btn-youtube-play'} onClick={() => \n                    {\n                        setAnimationState(animationState === 'running' ? 'paused' : 'running');\n                        setShowSpinner(true);\n                    }\n                }\n            >\n                {animationState === 'running' ? 'Pause' : 'Start'}\n            </Button>\n        </div>\n        <div className=\"spinner\" style={{ display: showSpinner ? 'block' : 'none' }}>{spinnerSVG}</div>\n    </div>\n  );\n};\n\nconst getSpinnerAnimation = (breathingType) => {\n    if (breathingType === 'coffee') {\n      return \"spinner-animation-coffee\";\n    } else if (breathingType === 'whiskey') {\n      return \"spinner-animation-whiskey\";\n    }\n    return \"spinner-animation-water\";\n  };\n  \n\nBreathing.propTypes = {\n  animationTime: PropTypes.number,\n  text: PropTypes.string,\n  breathingType: PropTypes.string,\n  url: PropTypes.string,\n};\n\nexport default Breathing;\n","import { Button } from 'react-bootstrap';\nimport React from 'react';\nimport './App.css';\n\nexport default function Header({ onBreathingSelected }) {\n    return (\n      <div>\n          <div><p>Choose a breathing exercise, click 'Start', and synchronize your breathing with the animation.</p></div>\n          <Button variant=\"primary\" size=\"md\" onClick={() => onBreathingSelected('water')}>Water</Button>\n          <Button variant=\"primary\" size=\"md\" onClick={() => onBreathingSelected('whiskey')}>Whiskey</Button>\n          <Button variant=\"primary\" size=\"md\" onClick={() => onBreathingSelected('coffee')}>Coffee</Button>\n      </div>\n    );\n  }\n  ","import React, { useState } from 'react';\nimport './App.css';\nimport Breathing from './Breathing';\nimport Header from './Header';\n\nconst breathingData = [\n  {\n    type: 'water',\n    animationTime: 8,\n    text: \"Practice water breathing to reduce stress and anxiety. Do it 10 times.\",\n    url: \"https://youtu.be/pWsXA8jlaWE?t=300\",\n  },\n  {\n    type: 'whiskey',\n    animationTime: 12,\n    text: \"To help with sleep, it is recommended to perform the whiskey breathing technique 10 times at a time.\",\n    url: \"https://youtu.be/pWsXA8jlaWE?t=437\",\n  },\n  {\n    type: 'coffee',\n    animationTime: 20,\n    text: \"Exhale sharply through your nose to increase energy. Use before exercise. Do it 3 times.\",\n    url: \"https://youtu.be/pWsXA8jlaWE?t=570\",\n  },\n];\n\nfunction App() {\n  const [selectedBreathing, setSelectedBreathing] = useState('');\n\n  const selectedBreathingData = breathingData.find(breathing => breathing.type === selectedBreathing);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div className=\"container\">\n          <Header onBreathingSelected={setSelectedBreathing} />\n        </div>\n      </header>\n      <main className=\"App-content\">\n          {selectedBreathingData && <Breathing \n            animationTime={selectedBreathingData.animationTime}\n            text={selectedBreathingData.text}\n            breathingType={selectedBreathingData.type}\n            url={selectedBreathingData.url}\n          />}\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}